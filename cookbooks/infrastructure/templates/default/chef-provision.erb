#!/bin/bash

check_errs()
{
  # Function. Parameter 1 is the return code
  # Para. 2 is text to display on failure.
  if [ "${1}" -ne "0" ]; then
    echo "ERROR # ${1} : ${2}"
    # as a bonus, make our script exit with the right error code.
    exit ${1}
  fi
}

enter_host(){
echo "Enter the fully qualified hostname of the system to provision."
read answer
host=$answer
}

select_env(){
env_list=`knife environment list | grep -v "_default"`
env=`echo $env_list`
   clear
   select func in $env; do
      case $func in
      *)
         env_targ="$func"
         break
         ;;
      esac
   done
}

enter_role(){
echo "Enter recipes to be included in the correct format. i.e. [recipe[mongodb::mongod]]"
  read answer
  format_check=`echo "${answer}" | grep "\[" | grep "\]\]"`
    if [ "$format_check" == "" ]; then
      echo "Your entry did not match the correct format."; exit 1
    else
      role_name="${answer}"
    fi
}
 
node_check(){
count=1
while [ $count -lt 10 ]; do
  node_check=`knife node show $host | grep "Response" | grep "not found"`
  if [ "$node_check" == "" ]; then
    echo "Node record found."; break
  else
    echo "Sleeping while Waiting for node record to be created."; sleep 10
    (( count++ ))
  fi
done

if [ "$node_check" != "" ]; then
  echo "Node record not found, can not add environment or roles without a node record."; exit 1
fi
}

attr_select(){

if [ "$role_name" == "realtrans" ]; then
  add_role="role[realtrans-cen] role[realtrans-ven]"
elif [ "$role_name" == "realdoc" ]; then
  add_role="role[realdoc]"
elif [ "$role_name" == "rabbitserver" ]; then
  add_role="role[rabbitserver]"
elif [ "$role_name" == "generic" ]; then
  add_role="role[all]"
else
  echo "There are no attributes for that server type. Check with the Chef Administrator."; exit 1
fi
}

provision_server(){
#host=$1
if [ "$host" == "" ]; then
  echo "You must include a hostname for this script. $0 hostname."; exit 1
fi
hostcheck=`nslookup $host | grep SERVFAIL`
if [ "$hostcheck" != "" ]; then
  echo "NSlookup of server failed, please check that the host is in DNS."; exit 1
fi
# Hostname was passed and nslookup succeeded, proceed with provisioning.
# triggering hostname command first to make sure the node name is set correctly.
ssh root@$host "hostname $host"
# Triggering bootstrap.
knife bootstrap $host --distro rhel6-rpms && echo "Chef has been provisioned to the host." 
check_errs $? "There was a problem with the bootstrap."

# Perform initial chef-client run to make sure that node record gets created.
ssh root@$host "chef-client"
check_errs $? "There was a problem running chef-client for initial run."

# This sleeps and looks for active node record on chef server after initial chef-client run.
node_check

# Add node to the new environment.
knife exec -E \'nodes.transform("name:$host") {|n| puts n.chef_environment("$env_targ"); n.save }\'
#knife node set_environment $host $env_targ
check_errs $? "There was a problem with adding the node to the environment."

# Add role all automatically to the new node.
knife node run_list add $host role[all] && echo "Role all has been added to the node." 
check_errs $? "There was a problem with adding the all role."

# Add any other roles that were selected.
#for i in `echo $role_name`; do
knife node run_list add $host "${role_name}" && echo "Roles have been added to the node." 
check_errs $? "There was a problem with adding ${role_name} role."
#done

# SSH to the new node and run chef-client.
ssh root@$host "chef-client" && echo "Initial chef-client run has been completed." 
check_errs $? "There was a problem with the chef client run, check the logs."
}

chef_check(){
knife node show $host
check_errs $? "There was a problem checking the role for this host."
}

pause(){
echo "Hit any key to continue..."
read pause
}

data_check(){
enter_host
select_env
enter_role
#select_role
#attr_select
#target_search
}

while :
        do
                clear
                echo "---------------------------------------------"
                echo " Main Menu "
                echo -e "---------------------------------------------\n"
                echo -e "[\033[36ma\033[0m] \033[32mCheck Server description\033[0m \n "
                echo -e "[\033[36mb\033[0m] \033[31mBootstrap a new server\033[0m \n"
                #echo -e "[\033[36mc\033[0m] \033[32mYUM Repository RPM check\033[0m \n "
                #echo -e "[\033[36md\033[0m] \033[32mPerform Chef Test Run on Instance\033[0m \n "
                #echo -e "[\033[36me\033[0m] \033[32mCheck RPM version installed on Instance\033[0m \n "
                #echo -e "[\033[36mf\033[0m] \033[31mStop Tomcat on Targets\033[0m \n"
                #echo -e "[\033[36mg\033[0m] \033[31mStart Tomcat on Targets\033[0m \n"
                #echo -e "[\033[36mh\033[0m] \033[31mExecute Chef Run on Instance\033[0m \n"
                echo -e "[\033[36mr\033[0m] \033[32mRead Me file with some instructions\033[0m \n"
                echo -e "[\033[36mx\033[0m] Exit\n "
                echo "==========================="
                echo -n "Enter your menu choice [a-x]: "
                read choice
                case "$choice" in
  a)
                enter_host; chef_check; pause
                ;;
  b)
                data_check; provision_server; pause
                ;;
#  c)
#                data_check; enter_version; rpm_repo; pause
#                ;;
#  d)
#                data_check; chef_testrun; pause
#                ;;
#  e)
#                data_check; rpm_version; pause
#                ;;
#  f)
#                data_check; stop_tomcat; pause
#                ;;
#  g)
#                data_check; start_tomcat; pause
#                ;;
#  h)
#                data_check; chef_execute; pause
#                ;;
#  r)
#                read_me; pause
#                ;;
  x)
                echo "Exiting..."; exit 0
                ;;
  *)
                echo "Oops! Please select a choice [a-x]";
                     echo "Press a key..."; read ;;
                esac
done

