maitred:
  host: "<%= node[:maitred][:host] %>"
  port: <%= node[:maitred][:app_port] %>
  adminPort: <%= node[:maitred][:admin_port] %>

  
mongo:
  host: "<%= node[:ods_adapter][:mongo][:host] %>"
  db: "<%= node[:ods_adapter][:mongo][:db] %>"
  letterRequestAuditCollection: "<%= node[:ods_adapter][:mongo][:letter_request_audit_collection] %>"
  letterRequestMappingCollection: "<%= node[:ods_adapter][:mongo][:letter_request_mapping_collection] %>"
  queryParamsMappingCollection: "<%= node[:ods_adapter][:mongo][:query_params_mapping_collection] %>"

quartz:
  jobs:
    ? realdoc.adapter.ods.jobs.LetterRequestBatchProcessorJob
    : "<%= node[:ods_adapter][:schedule] %>"

database:
  # The full name of the JDBC driver class.
  driverClass: <%= node[:ods_adapter][:db][:driver_class] %>

  # The username used to connect to the server.
  user: <%= node[:ods_adapter][:db][:user] %>

  # The password used to connect to the server.
  password: "<%= node[:ods_adapter][:db][:password] %>"

  # The URL of the server.
  url: <%= node[:ods_adapter][:db][:url] %>
  

  # Any additional JDBC driver parameters.
  properties:
    charSet: UTF-8

  # If a request for a connection is blocked for longer than this period, an exception will be thrown.
  maxWaitForConnection: <%= node[:ods_adapter][:db][:max_wait_conn] %>

  # The SQL query that will be used to validate connections from this pool before returning them to the caller or pool.
  validationQuery: "/* Adapter-ODS Health Check */ SELECT 1 FROM DUAL"

  # The minimum size of the connection pool.
  minSize: <%= node[:ods_adapter][:db][:min_size] %>

  # The initial size of the connection pool.
  initialSize: <%= node[:ods_adapter][:db][:initial_size] %>

  # The maximum size of the connection pool.
  maxSize: <%= node[:ods_adapter][:db][:max_size] %>

  # Set to true if query validation should take place while the connection is idle.
  checkConnectionWhileIdle: false

  # Whether or not connections will be validated before being borrowed from the pool.
  # If the connection fails to validate, it will be dropped from the pool, and another will be borrowed.
  # Required to avoid "Broken pipe" errors.
  checkConnectionOnBorrow: true

  # To avoid excess validation, only run validation once every interval.
  validationInterval: <%= node[:ods_adapter][:db][:validation_interval] %>

  # The minimum amount of time an connection must sit idle in the pool before it is eligible for eviction.
  minIdleTime : <%= node[:ods_adapter][:db][:min_idle_time] %>

logging:
  level: <%= node[:ods_adapter][:logging][:log_level] %>
  appenders:
    - type: file
      currentLogFilename: /var/log/realdoc/ods-adapter.log
      threshold: ALL
      archive: true
      archivedLogFilenamePattern: /var/log/realdoc/ods-adapter-%d.log.gz
      archivedFileCount: <%= node[:ods_adapter][:logging][:log_file_count] %>
      timeZone: UTC
      logFormat: "[%d{ISO8601,UTC}] %-5p %X{appId:-ods-adapter-1} %c: %m%n%rEx"

swagger:
  enabled: true

server:
  applicationConnectors:
    - type: http
      port: <%= node[:ods_adapter][:app_port] %>
  adminConnectors:
    - type: http
      port: <%= node[:ods_adapter][:admin_port] %>

  requestLog:
    timeZone: UTC
    appenders:
      - type: file
        threshold: ALL
        currentLogFilename: /var/log/realdoc/ods-adapter-access.log
        archive: true
        archivedLogFilenamePattern: /var/log/realdoc/ods-adapter-access.%d.log.gz
        archivedFileCount: <%= node[:ods_adapter][:logging][:log_file_count] %>

custom:
# The size of the pool holding the threads that aggregate the datapoint information from ODS database.
# This has to be less than database.maxSize / avg. number of queries per letter request.
  requestsAggregationThreadPoolSize: <%= node[:ods_adapter][:aggregation_thread_poolsize] %>

# The size of the pool holding the threads that make the HTTP calls to MaitreD.
  requestsDeliveryThreadPoolSize: <%= node[:ods_adapter][:delivery_thread_poolsize] %>

# The number of request items that will be grouped in a single HTTP call to MaitreD.
  requestItemsSplitThreshold: <%= node[:ods_adapter][:req_items_split_threshold] %>

# The name of the schema holding the ODS letter tables.
  letterRequestsSchemaName: <%= node[:ods_adapter][:letter_req_schema_name] %>

retry:
 # The maximum number of ping requests to make before giving up
 maxPingAttempts: <%= node[:ods_adapter][:retry][:maxPingAttempts] %>
 
 # Set the initial sleep interval value (ms) before making the first ping. Cannot be set to a value less than one.
 initialPingDelay: <%= node[:ods_adapter][:retry][:initialPingDelay] %>

 # The maximum back off period. The value will be reset to 1 if this has a value less than 1.
 # Set this to avoid infinite waits if backing off a large number of times (or if the multiplier is set too high).
 maxInterval: <%= node[:ods_adapter][:retry][:maxInterval] %>

 # The multiplier value. Hint: do not use values much in excess of 1.0 (or the backoff will get very long very fast).
 intervalMultiplier: <%= node[:ods_adapter][:retry][:intervalMultiplier] %>
