#!/bin/bash
function usage() {
	echo "usage:elasticSearchRiverIndex.sh -h <ElasticSearch_Host> -p <ElasticSearch_Port> -k <Mongo_Host> -q <Mongo_Port> -d <Mongo_Database> -v <version>"
}

while getopts "h:p:k:q:d:v:" opt; do
    case $opt in
        h)
            eshost=$OPTARG
            echo $eshost
            ;;
        p)
            esport=$OPTARG
            echo $esport
            ;;
        k)
            mongohost=$OPTARG
            echo $mongohost
            ;;
        q)
            mongoport=$OPTARG
            echo $mongoport
            ;;
        d)
            mongodb=$OPTARG
            echo $mongodb
            ;;
        v)
            version=$OPTARG
            echo $version
            ;; 
    esac
done

if [[ "${eshost}" == "" || "${esport}" == "" || "${mongohost}" == "" || "${mongoport}" == "" || "${mongodb}" == "" || "${version}" == "" ]]; then
    usage
    exit 1;
fi

#create temp files
timestamp=`date +"%s"`
cp documentsIndex.json documentsIndex.${timestamp}.json
cp dispatchesIndex.json dispatchesIndex.${timestamp}.json
cp documentsMapping.json documentsMapping.${timestamp}.json
cp dispatchesMapping.json dispatchesMapping.${timestamp}.json
cp aliases.json aliases.${timestamp}.json

sed -i "s/mongo_host/${mongohost}/g" *.${timestamp}.json
sed -i "s/mongo_port/${mongoport}/g" *.${timestamp}.json
sed -i "s/mongo_db/${mongodb}/g" *.${timestamp}.json
sed -i "s/documentname/documents_${version}/g" *.${timestamp}.json
sed -i "s/documenttype/document_${version}/g" *.${timestamp}.json
sed -i "s/dispatchname/dispatches_${version}/g" *.${timestamp}.json
sed -i "s/dispatchtype/dispatch_${version}/g" *.${timestamp}.json
sed -i "s/document/document_${version}/g" documentsMapping.${timestamp}.json
sed -i "s/dispatch/dispatch_${version}/g" dispatchesMapping.${timestamp}.json
sed -i "s/documentindex/documents_${version}/g" aliases.${timestamp}.json
sed -i "s/documentalias/documents${version}/g" aliases.${timestamp}.json
sed -i "s/dispatchindex/dispatches_${version}/g" aliases.${timestamp}.json
sed -i "s/dispatchalias/dispatches${version}/g" aliases.${timestamp}.json


rm *.log

#mapping creation
curl -XPUT -ss "${eshost}:${esport}/documents_${version}" --data @"documentsMapping.${timestamp}.json" >> documentsMapping.${timestamp}.log
if grep -Fq '"acknowledged":true' documentsMapping.${timestamp}.log
then
    echo "Created documents mapping"
else
    echo "Failed creating documents mapping. Check documentsMapping.log"
fi

curl -XPUT -ss "${eshost}:${esport}/dispatches_${version}" --data @"dispatchesMapping.${timestamp}.json" >> dispatchesMapping.${timestamp}.log
if grep -Fq '"acknowledged":true' dispatchesMapping.${timestamp}.log
then
    echo "Created dispatches mapping"
else
    echo "Failed creating dispatches mapping. Check dispatchesMapping.log"
fi

#index creation
curl -XPUT -ss "${eshost}:${esport}/_river/realdocDocuments_${version}/_meta" --data @"documentsIndex.${timestamp}.json" >> documentsIndex.${timestamp}.log
if grep -Fq '"created":true' documentsIndex.${timestamp}.log
then
   	echo "Created documents index"
else
	echo "Failed creating documents index. Check documentsIndex.log"
fi


curl -XPUT -ss "${eshost}:${esport}/_river/realdocDispatches_${version}/_meta" --data @"dispatchesIndex.${timestamp}.json" >> dispatchesIndex.${timestamp}.log
if grep -Fq '"created":true' dispatchesIndex.${timestamp}.log
then
   	echo "Created dispactehs index"
else
	echo "Failed creating dispactehs index. Check dispatchesIndex.log"
fi

#index alias creation
curl -XPOST -ss "${eshost}:${esport}/_aliases" --data @"aliases.${timestamp}.json" >> aliases.${timestamp}.log
if grep -Fq '"acknowledged":true' aliases.${timestamp}.log
then
    echo "Created aliases"
else
    echo "Failed creating aliases. Check aliases.log"
fi

rm *.${timestamp}.json
echo "Execution Complete"
