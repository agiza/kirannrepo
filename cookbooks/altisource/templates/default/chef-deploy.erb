#!/bin/bash

# Prep the filesystem with the application names.
if [ -f /tmp/rpm-appnames.txt ]; then rm -f /tmp/rpm-appnames.txt; fi
if [ -f /tmp/rpm-versions.txt ]; then rm -f /tmp/rpm-versions.txt; fi
app_list="<%= @appnames %>"
for i in `echo "$app_list"`; do
        echo $i | cut -d "|" -f1 >> /tmp/rpm-appnames.txt
	echo $i >> /tmp/rpm-versions.txt
done
app_list=`cat /tmp/rpm-versions.txt`
applications=`cat /tmp/rpm-appnames.txt`
app_names=`echo -e "$applications"`

# variable definition
ssh_command="ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

# functions

pause(){
echo "press Enter key to continue..."; read response
}

environ_list(){
env_list=`knife environment list | grep -v _default`
}

attr_select(){
for i in `echo $app_name`; do
  app_attribute=`grep $i /tmp/rpm-versions.txt | cut -d "|" -f2`
done
}

target_search(){
target_list=`knife search node "$app_attribute:* AND chef_environment:$env_targ" | grep "Node Name" | cut -d ":" -f2`
}

chef_version(){
for target_host in `echo $target_list`; do
  curr_version=`knife node show $target_host -a $app_attribute | cut -d ":" -f2`
  echo "Chef version is $curr_version"
done
}

rpm_version(){
for target_host in `echo $target_list`; do
  rpm_version=`$ssh_command root@$target_host "rpm -qa | grep $app_name"`
  echo "Version is $rpm_version."
done
}

chef_testrun(){
mkdir -p /tmp/chef-testrun
for target_host in `echo $target_list`; do
echo "Please wait while test run is performed, this may take a few minutes...."
$ssh_command root@$target_host "chef-client -W" >> /tmp/chef-testrun/chef-test.txt
less -f /tmp/chef-testrun/chef-test.txt
rm /tmp/chef-testrun/chef-test.txt
rm -r /tmp/chef-testrun
done
}

chef_execute(){
mkdir -p /tmp/chef-run
for target_host in `echo $target_list`; do
echo "Please wait while test run is performed, this may take a few minutes...."
$ssh_command root@$target_host "chef-client" >> /tmp/chef-run/chef-run.txt
less -f /tmp/chef-run/chef-run.txt
rm /tmp/chef-run/chef-run.txt
rm -r /tmp/chef-run
done
}

rpm_repo(){
software_check=`find /var/www/html/yum-repo/release -type f -name $app_name-$version.noarch.rpm`
if [ "$software_check" == "" ]; then
echo "Software does not appear to be in the yum release repo."
else
echo "Software appears to be in the yum release repo."
fi
}

start_tomcat(){
echo "Are you sure you want to start tomcat on your hosts? (y or n)"
read answer
if [ "$answer" != "y" ]; then
echo "You did not confirm, aborting."; exit 1
fi
for target_host in `echo $target_list`; do
$ssh_command root@$target_host "service altitomcat start"
echo "Tomcat started on $target_host."
done
}

stop_tomcat(){
echo "Are you sure you want to start tomcat on your hosts? (y or n)"
read answer
if [ "$answer" != "y" ]; then
echo "You did not confirm, aborting."; exit 1
fi
for target_host in `echo $target_list`; do
$ssh_command root@$target_host "service altitomcat stop"
echo "Tomcat started on $target_host."
done
}

data_check(){
select_env
select_app
attr_select
target_search
}

tag_instance(){
if [ "$target_list" == "" -o "$app_name" == "" -o "$version" == "" ]; then
  echo "Missing critical information, command can not be completed. Your command was $target_list, $app_name, $version."; exit 1
fi
for target_host in `echo $target_list`; do
  deploy-software -f tag -a $app_name -v $version -t $target_host
done
}

select_env(){
environ_list
env=`echo $env_list`
   clear
   select func in $env; do
      case $func in
      *)
         env_targ="$func"
         break
         ;;
      esac
   done
}

select_app(){
app=`echo $app_names`
   clear
   select func in $app; do
      case $func in
      *)
         app_name="$func"
         break
         ;;
      esac
   done
}

enter_version(){
echo "Enter version number for $app_name to be deployed to $env_list:"
  read ver
echo "Please confirm version is $ver. (y or no)?"
  read answer
if [ "$answer" != "y" ]; then
  echo "Version not correct, please try again."; enter_version
else
version=$ver
fi
}

read_me(){
echo "This script is a simple interface to allow some automated actions against the current chef environment.  Basically, you can tag new versions of software to be deployed, execute those deployments, check for current versions per Chef, actual versions per RPM, start and stop the tomcat instance for scheduled upgrades, and perform test runs of chef client on the instances to see the effects of proposed changes.  Further functionality to stage full, multiple target/version implementations will be added later. Short list of functions is:
a: Check version of software that Chef reports is installed currently.
b: Tag a new version of software for installation.
c: Check to see if a specific version of RPM is in the yum repository.
d: Perform a test run of chef-client to see if the changes are in line with expectations.
e: Check to see what version of the RPM is actually installed on the target.
f: Stop tomcat instance on the target.
g: Start the tomcat instance on the target.
h: Execute a software deployment by running Chef-client on the target.
x: Exit the menu.
"
}
#This is the actual menu for the wrapper script.
while :
        do
                clear
                echo "---------------------------------------------"
                echo " Main Menu "
                echo -e "---------------------------------------------\n"
                echo -e "[\033[36ma\033[0m] \033[32mCheck Chef Version\033[0m \n "
                echo -e "[\033[36mb\033[0m] \033[31mTag New Version\033[0m \n"
                echo -e "[\033[36mc\033[0m] \033[32mRPM File check in repository\033[0m \n "
                echo -e "[\033[36md\033[0m] \033[32mChef Test Run on Targets\033[0m \n "
                echo -e "[\033[36me\033[0m] \033[32mCheck RPM version currently on Targets\033[0m \n "
                echo -e "[\033[36mf\033[0m] \033[31mStop Tomcat on Targets\033[0m \n"
                echo -e "[\033[36mg\033[0m] \033[31mStart Tomcat on Targets\033[0m \n"
                echo -e "[\033[36mh\033[0m] \033[31mExecute Software deployment\033[0m \n"
                echo -e "[\033[36mr\033[0m] \033[32mRead Me file with some instructions\033[0m \n"
                echo -e "[\033[36mx\033[0m] Exit\n "
                echo "==========================="
                echo -n "Enter your menu choice [a-x]: "
                read choice
                case "$choice" in
  a)
                data_check; chef_version; pause
                ;;
  b)
                data_check; enter_version; rpm_repo; tag_instance; pause 
                ;;
  c)
                data_check; enter_version; rpm_repo; pause 
                ;;
  d)
                data_check; chef_testrun; pause
                ;;
  e)
                data_check; rpm_version; pause
                ;;
  f)
                data_check; stop_tomcat; pause
                ;;
  g)
                data_check; start_tomcat; pause
                ;;
  h)
                data_check; chef_execute; pause
                ;;
  r)
                read_me; pause
                ;;
  x)
                echo "Exiting..."; exit 0
                ;;
  *)
                echo "Oops! Please select a choice [a-x]"; 
                     echo "Press a key..."; read ;;
                esac
done

