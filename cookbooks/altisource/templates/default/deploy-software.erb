#!/bin/bash

ssh_command="ssh -q -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"

if [ -f /tmp/rpm-appnames.txt ]; then rm -f /tmp/rpm-appnames.txt; fi
if [ -f /tmp/rpm-versions.txt ]; then rm -f /tmp/rpm-versions.txt; fi
app_names="<%= @appnames %>"
for i in `echo "$app_names"`; do
        echo $i | cut -d "|" -f1 >> /tmp/rpm-appnames.txt
        app_name=`echo $i | cut -d "|" -f1`
        app_version=`echo $i | cut -d "|" -f2`
        echo "$app_name|$app_version" >> /tmp/rpm-versions.txt
done
applications=`cat /tmp/rpm-appnames.txt`
application_names=`echo -e "$applications"`

data_check(){

if [ "$version" == "" -o "$application_name" == "" ]; then
        echo "This command requires application name, version."; exit 1
elif [ "$command_function" == "deploy" -o "$command_function" == "all" ] && [ "$target_host" == "" ]; then
        echo "To deploy an application, you need to provide a target host option to execute this command."; exit 1
fi


# Version check and confirm echo.
version_check=`echo $version | grep "-"`
        if [ "$version_check" == "" ]; then
                echo "Version must be in the form of branch-build, i.e. 0.7.2.RC1-12, please try again."; exit 1
        fi
branch=`echo $version | cut -d "-" -f1`
build=`echo $version | cut -d "-" -f2`
echo "Version is $branch-$build"

app_name_check
}
#Function to grab the name and attribute from the changing data file.
app_name_check(){

name_version=`grep "$application_name" /tmp/rpm-versions.txt`
application_bin="$application_name"
application_target="$application_name"
app_attribute=`echo $name_version | cut -d "|" -f2`

# $application_name $application_bin $application_target $app_attribute
if [ "$name_version" == "" -o "$app_attribute" == "" ]; then
        echo -e "$application_name is not a valid application.  Valid application names are: \n$application_names  \n  Please try again."; exit 1
fi

application_package="$application_target-$branch-$build.noarch.rpm"
}

tag_package(){
# Update node attribute for version
node_name="$target_host"
app_version="$version"
if [ "$node_name" == "" -o "$app_attribute" == "" -o "$version" == "" ]; then
echo "This command requires a server, application name and version number. i.e. $0 realtrans-demo realtrans_central_version 1.0.0-14.  Please try again."; exit 1

# Check that target_host is a valid node name
node_check=`knife node list | grep $node_name`
if [ "$node_check" == "" ]; then
        echo "$target_host is not a valid chef node name, please check your target as a chef node update is not possible with this target."; exit 1
fi

else

update_command="nodes.find(:name => "\'"$node_name"\'") {|n| n.set["\'"$app_attribute"\'"] = "\'"$app_version"\'"; n.save }"
        knife exec -E "$update_command"; if [ "$?" -gt "0" ]; then echo "Update version command failed."; exit 1; fi
        #update_version.sh $node_name $app_attribute $app_version ; if [ "$?" -gt "0" ]; then echo "Update version command failed."; exit 1; fi
fi
}

# Function to execute a chef run to implement a new tag version.
execute_tag(){
# Execute chef client to perform an update on the server.
$ssh_command root@$target_host "yum clean all;sleep 30; yum clean all; chef-client"

}


# Function to deploy the package to a target server
deploy_package(){
# Deploy the package
echo "$application_package will be deployed."
# Tag chef with updated version number
tag_package

# Execute chef client on target
execute_tag

}

clean(){
if [ -f /opt/atlassian/bamboo/rpmbuild/RPMS/noarch/$application_package ]; then
   rm -f /opt/atlassian/bamboo/rpmbuild/RPMS/noarch/$application_package
fi
if [ -f /tmp/$application_name-$branch-$build.tar.gz ]; then
   rm -f /tmp/$application_name-$branch-$build.tar.gz
fi
rm -rf $working_dir
rm -rf /tmp/`date +%F`
}

command_line(){
if [ "$command_function" == "tag" ]; then
        data_check
	tag_package
        clean
       elif [ "$command_function" == "deploy" ]; then
        data_check
        deploy_package
        clean
       elif [ "$command_function" == "execute" ]; then
        data_check
        execute_tag
        clean
       elif [ "$command_function" == "" ]; then
        echo "Need to provide a function and options, i.e. $0 -f deploy|tag|execute -a application_name -v version [ -t target_host ] [ -j java_binary_url ]."
fi
}

while getopts "f:a:v:t:j:" opt; do
        case $opt in
                f) command_function="$OPTARG"
                        echo "$command_function"
                        ;;
                a)      #application_name=$2
                        application_name="$OPTARG"
                        ;;
                v)
                        version="$OPTARG"
                        #version=$3
                        ;;
                t)
                        # Used for Deployments
                        target_host="$OPTARG"
                        echo "If Deployment is requested, it will occur on $target_host"
                        ;;
                j)
                        bin_url="$OPTARG"
                        ;;
        esac
done

command_line


